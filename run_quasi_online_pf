set.seed(1234)
library(mvnfast)
library(FKF)
library(roxygen2)
Napf = N = 200
lag = 10
Time = 200
d_ = 5
alpha = 0.42
a <- matrix(nrow = d_, ncol = d_)
for (i in 1:d_){
  for (j in 1:d_){
    a[i,j] = alpha^(abs(i-j) + 1)
  }
}
ini <- rep(0, d_)
b = c = D_ = ini_c = diag(1, nrow = d_, ncol = d_)
k_ <- 5
tau_ <- 0.5
kappa_ = 0.5
dt_ <- ct_ <- matrix(0, d_, 1)
Tt_ <- a
P0_ <- Zt_ <- Ht_ <- Gt_ <- diag(1, d_, d_)
a0_ <- rep(0, d_)
model <- list(ini_mu = ini, ini_cov = ini_c, A = a, B = b, C = c, D = D_, k = k_, 
              tau = tau_, kappa = kappa_, dt = dt_, ct = ct_, Tt = Tt_, P0 = P0_, Zt = Zt_, 
              Ht = Ht_, Gt = Gt_, a0 = a0_, d = d_)

obs_ <- sample_obs(model, Time)



output <- generate_blocks(lag, Time)
breaks_ <- output[[1]] 
psi_index_ <- output[[2]]

data <- list(obs = obs_, breaks = breaks_, psi_index = psi_index_)

run_quasi_online_pf <- function(model, data, lag, Napf, N){
  breaks <- data$breaks
  index <- data$psi_index
  obs <- data$obs
  Xs <- array(NA, dim = c(nrow(obs), N, model$d))
  output <- run_iAPF(model, data, Napf)
  #X <- output[[1]]
  #w <- output[[2]]
  psi_pa <- output[[3]]
  logZ <- output[[4]]
  #ancestors <- output[[5]]
  
  psi_final <- combine_psi(psi_pa, index)
  
  output1 <- run_psi_APF(model, list(obs, breaks[[1]][1], 0, 0), Napf, psi_final, init = FALSE)
  X <- output1[[1]]
  w <- output1[[2]]
  logZ <- output1[[3]]
  ancestors <- output1[[4]]
  
  for(i in 1:N){
    Xs[i, Time,] <- X[i, Time,]
    a <- ancestors[Time, i] 
    for (t in (Time-1):1) {
      Xs[i, t, ] <- X[i, a, ]
      a <- ancestors[t, a]
    }
  }
  
  #new funtcion
  # Call the function to find rows where elements differ from the previous row
  different_rows <- find_different_rows(ancestors)
  logZ = 0
  for(t in c(different_rows)){
    logZ <- logZ + normalise_weights_in_log_space(w[t-1,])[[2]] 
  }
  logZ <- logZ + normalise_weights_in_log_space(w[Time,])[[2]] 
  
  output2 <- compute_filtering(model, data)
  fkf.obj <- output2[[1]]
  fks.obj <- output2[[2]]
  
  KS_dist <- compute_dKS(X[Time,,], w[Time,], fks.obj)
  
  log_ratio <- compute_log_ratio(logZ, fkf.obj)
  
  return(list(X = X, w = w, logZ = logZ, Xs = Xs, log_ratio = log_ratio, KS_dist = KS_dist))
}



ratio <- vector()
dist <- vector()
for (qq in 1:1) {
  set.seed(qq*2)
  ratio[qq] <- run_quasi_online_pf(model, data, lag, Napf, N)[[5]]
  dist[qq] <- run_quasi_online_pf(model, data, lag, Napf, N)[[6]]
}

